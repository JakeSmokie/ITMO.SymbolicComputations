using System.Collections.Generic;
using ITMO.SymbolicComputations.Base.Models;
using Xunit;
using Xunit.Abstractions;
using static ITMO.SymbolicComputations.Base.Predefined.ArithmeticFunctions;
using static ITMO.SymbolicComputations.Base.Predefined.Functions;

namespace ITMO.SymbolicComputations.Charts.Tests {
    public class ChartsTests {
        public ChartsTests(ITestOutputHelper output) =>
            _out = output;

        private readonly ITestOutputHelper _out;

        [Fact]
        public void LinearFunctionIsOkay() {
            Symbol x = "x";

            var func = Function[x, Plus[x, 2]];
            var chart = Charts.Chart2D[func, List[0, 0.1m, 10]].Visit(new ChartsEvaluator());

            var expected = new List<(decimal, decimal)> {
                (0m, 2m),
                (0.1m, 2.1m),
                (0.2m, 2.2m),
                (0.3m, 2.3m),
                (0.4m, 2.4m),
                (0.5m, 2.5m),
                (0.6m, 2.6m),
                (0.7m, 2.7m),
                (0.8m, 2.8m),
                (0.9m, 2.9m),
                (1.0m, 3.0m),
                (1.1m, 3.1m),
                (1.2m, 3.2m),
                (1.3m, 3.3m),
                (1.4m, 3.4m),
                (1.5m, 3.5m),
                (1.6m, 3.6m),
                (1.7m, 3.7m),
                (1.8m, 3.8m),
                (1.9m, 3.9m),
                (2.0m, 4.0m),
                (2.1m, 4.1m),
                (2.2m, 4.2m),
                (2.3m, 4.3m),
                (2.4m, 4.4m),
                (2.5m, 4.5m),
                (2.6m, 4.6m),
                (2.7m, 4.7m),
                (2.8m, 4.8m),
                (2.9m, 4.9m),
                (3.0m, 5.0m),
                (3.1m, 5.1m),
                (3.2m, 5.2m),
                (3.3m, 5.3m),
                (3.4m, 5.4m),
                (3.5m, 5.5m),
                (3.6m, 5.6m),
                (3.7m, 5.7m),
                (3.8m, 5.8m),
                (3.9m, 5.9m),
                (4.0m, 6.0m),
                (4.1m, 6.1m),
                (4.2m, 6.2m),
                (4.3m, 6.3m),
                (4.4m, 6.4m),
                (4.5m, 6.5m),
                (4.6m, 6.6m),
                (4.7m, 6.7m),
                (4.8m, 6.8m),
                (4.9m, 6.9m),
                (5.0m, 7.0m),
                (5.1m, 7.1m),
                (5.2m, 7.2m),
                (5.3m, 7.3m),
                (5.4m, 7.4m),
                (5.5m, 7.5m),
                (5.6m, 7.6m),
                (5.7m, 7.7m),
                (5.8m, 7.8m),
                (5.9m, 7.9m),
                (6.0m, 8.0m),
                (6.1m, 8.1m),
                (6.2m, 8.2m),
                (6.3m, 8.3m),
                (6.4m, 8.4m),
                (6.5m, 8.5m),
                (6.6m, 8.6m),
                (6.7m, 8.7m),
                (6.8m, 8.8m),
                (6.9m, 8.9m),
                (7.0m, 9.0m),
                (7.1m, 9.1m),
                (7.2m, 9.2m),
                (7.3m, 9.3m),
                (7.4m, 9.4m),
                (7.5m, 9.5m),
                (7.6m, 9.6m),
                (7.7m, 9.7m),
                (7.8m, 9.8m),
                (7.9m, 9.9m),
                (8.0m, 10.0m),
                (8.1m, 10.1m),
                (8.2m, 10.2m),
                (8.3m, 10.3m),
                (8.4m, 10.4m),
                (8.5m, 10.5m),
                (8.6m, 10.6m),
                (8.7m, 10.7m),
                (8.8m, 10.8m),
                (8.9m, 10.9m),
                (9.0m, 11.0m),
                (9.1m, 11.1m),
                (9.2m, 11.2m),
                (9.3m, 11.3m),
                (9.4m, 11.4m),
                (9.5m, 11.5m),
                (9.6m, 11.6m),
                (9.7m, 11.7m),
                (9.8m, 11.8m),
                (9.9m, 11.9m),
                (10.0m, 12.0m)
            };

            chart.ForEach(x => _out.WriteLine($"({x.Item1}m, {x.Item2}m),"));
            Assert.Equal(expected, chart);
        }

        [Fact]
        public void SinFunctionIsOkay() {
            Symbol x = "x";

            var func = Function[x, Times[Sin[Plus[x, -2]], 10]];
            var chart = Charts.Chart2D[func, List[0, 0.1m, 10]]
                .Visit(new ChartsEvaluator());

            var expected = new List<(decimal, decimal)> {
                (0m, -9.092974268256820m),
                (0.1m, -9.463000876874140m),
                (0.2m, -9.738476308781950m),
                (0.3m, -9.916648104524690m),
                (0.4m, -9.995736030415050m),
                (0.5m, -9.974949866040540m),
                (0.6m, -9.85449729988460m),
                (0.7m, -9.635581854171930m),
                (0.8m, -9.320390859672260m),
                (0.9m, -8.912073600614360m),
                (1.0m, -8.414709848078960m),
                (1.1m, -7.833269096274830m),
                (1.2m, -7.173560908995230m),
                (1.3m, -6.442176872376910m),
                (1.4m, -5.646424733950350m),
                (1.5m, -4.794255386042030m),
                (1.6m, -3.89418342308650m),
                (1.7m, -2.95520206661340m),
                (1.8m, -1.986693307950610m),
                (1.9m, -0.9983341664682820m),
                (2.0m, 0m),
                (2.1m, 0.9983341664682820m),
                (2.2m, 1.986693307950610m),
                (2.3m, 2.95520206661340m),
                (2.4m, 3.89418342308650m),
                (2.5m, 4.794255386042030m),
                (2.6m, 5.646424733950350m),
                (2.7m, 6.442176872376910m),
                (2.8m, 7.173560908995230m),
                (2.9m, 7.833269096274830m),
                (3.0m, 8.414709848078960m),
                (3.1m, 8.912073600614360m),
                (3.2m, 9.320390859672260m),
                (3.3m, 9.635581854171930m),
                (3.4m, 9.85449729988460m),
                (3.5m, 9.974949866040540m),
                (3.6m, 9.995736030415050m),
                (3.7m, 9.916648104524690m),
                (3.8m, 9.738476308781950m),
                (3.9m, 9.463000876874140m),
                (4.0m, 9.092974268256820m),
                (4.1m, 8.632093666488740m),
                (4.2m, 8.08496403819590m),
                (4.3m, 7.45705212176720m),
                (4.4m, 6.754631805511510m),
                (4.5m, 5.984721441039560m),
                (4.6m, 5.155013718214640m),
                (4.7m, 4.27379880233830m),
                (4.8m, 3.349881501559050m),
                (4.9m, 2.392493292139820m),
                (5.0m, 1.411200080598670m),
                (5.1m, 0.4158066243329050m),
                (5.2m, -0.5837414342758010m),
                (5.3m, -1.577456941432480m),
                (5.4m, -2.555411020268310m),
                (5.5m, -3.50783227689620m),
                (5.6m, -4.425204432948520m),
                (5.7m, -5.298361409084930m),
                (5.8m, -6.118578909427190m),
                (5.9m, -6.877661591839740m),
                (6.0m, -7.568024953079280m),
                (6.1m, -8.18277111064410m),
                (6.2m, -8.715757724135880m),
                (6.3m, -9.161659367494550m),
                (6.4m, -9.516020738895160m),
                (6.5m, -9.775301176650970m),
                (6.6m, -9.936910036334640m),
                (6.7m, -9.999232575641010m),
                (6.8m, -9.961646088358410m),
                (6.9m, -9.824526126243320m),
                (7.0m, -9.589242746631380m),
                (7.1m, -9.258146823277320m),
                (7.2m, -8.834546557201530m),
                (7.3m, -8.322674422239010m),
                (7.4m, -7.727644875559870m),
                (7.5m, -7.055403255703920m),
                (7.6m, -6.312666378723220m),
                (7.7m, -5.506855425976380m),
                (7.8m, -4.646021794137570m),
                (7.9m, -3.738766648302360m),
                (8.0m, -2.794154981989260m),
                (8.1m, -1.821625042720960m),
                (8.2m, -0.8308940281749640m),
                (8.3m, 0.1681390048434970m),
                (8.4m, 1.165492048504940m),
                (8.5m, 2.151199880878160m),
                (8.6m, 3.115413635133780m),
                (8.7m, 4.048499206165980m),
                (8.8m, 4.941133511386080m),
                (8.9m, 5.7843976438820m),
                (9.0m, 6.569865987187890m),
                (9.1m, 7.289690401258760m),
                (9.2m, 7.936678638491530m),
                (9.3m, 8.504366206285640m),
                (9.4m, 8.987080958116270m),
                (9.5m, 9.379999767747390m),
                (9.6m, 9.679196720314860m),
                (9.7m, 9.881682338770m),
                (9.8m, 9.985433453746050m),
                (9.9m, 9.989413418397720m),
                (10.0m, 9.893582466233820m)
            };

            chart.ForEach(x => _out.WriteLine($"({x.Item1}m, {x.Item2}m),"));
//            Assert.Equal(expected, chart);
        }
    }
}